// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product.sql

package postgresdb

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    name,
    description,
    price,
    quantity
) VALUES (
    $1, $2, $3, $4
)
RETURNING id
`

type CreateProductParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Price       int32  `json:"price"`
	Quantity    int32  `json:"quantity"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (int32, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Quantity,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, description, price, quantity
FROM products
WHERE id = $1
`

type GetProductByIDRow struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Price       int32  `json:"price"`
	Quantity    int32  `json:"quantity"`
}

func (q *Queries) GetProductByID(ctx context.Context, id int32) (GetProductByIDRow, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i GetProductByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, price, quantity
FROM products
ORDER BY id
`

type ListProductsRow struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Price       int32  `json:"price"`
	Quantity    int32  `json:"quantity"`
}

func (q *Queries) ListProducts(ctx context.Context) ([]ListProductsRow, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductsRow{}
	for rows.Next() {
		var i ListProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET
    name = $2,
    description = $3,
    price = $4,
    quantity = $5
WHERE id = $1
`

type UpdateProductParams struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Price       int32  `json:"price"`
	Quantity    int32  `json:"quantity"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Quantity,
	)
	return err
}
